datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  routines Routine[]
  workouts Workout[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

enum SCHEME {
  REPS
  WEIGHT
  TIME
}

enum EQUIPMENT {
  BODYWEIGHT
  BODYWEIGHT_PLUS
  BARBELL
  DUMBBELL
  CABLE
  ASSISTED
  MACHINE
  SMITH
  BANDS
}

enum MECHANIC {
  COMPOUND
  ISOLATION
}

enum FORCE {
  PUSH
  PULL
  LEGS
  HINGE
  ROTATION
  CORE
}

model Exercise {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String
  scheme    SCHEME? // Reps, Reps x Weight, Time
  target    Json? // chest, back, arms(triceps, forearms), biceps, shoulders, legs (quads, glutes, hamstrings, calves), abs/core, other, olympic, full body, cardio
  equipment EQUIPMENT? // body only, barbell, dumbbell, cable, machine
  mechanic  MECHANIC? // compound, isolation
  force     FORCE? // push, push, legs, hinge,
  movements Movement[]
}

model Routine {
  id          String     @id @default(cuid())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String? // null if public
  name        String
  activity    String? // cardio, strength, hiit, lifting, running
  description String?
  movements   Movement[]
  workouts    Workout[]
}

model Movement {
  id        String   @id @default(cuid())
  exercise  Exercise @relation(fields: [slug], references: [slug])
  slug      String
  sets      Set[]
  // Movements have a polymorphic relationship to routines and workout
  routine   Routine? @relation(fields: [routineId], references: [id])
  routineId String?
  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId String?
}

model Set {
  id         String   @id @default(cuid())
  movement   Movement @relation(fields: [movementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movementId String
  type       String   @default("working") // warmup, working, dropset, fail
  order      Int
  value      Json? // { reps: 10, weight: { value: 100, unit: lb}, time: 60, variation: { name: paused, pause: 2} }
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Workout {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  name      String
  duration  Int
  activity  String? // cardio, strength, hiit, lifting, running
  movements Movement[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Workouts can be based off a routine
  routine   Routine? @relation(fields: [routineId], references: [id])
  routineId String?
}
